def largest_product_in_series(num, series_length):
    #digits converted to string and stored in the list 'k'
    k=list(str(num))
    
    #initializing variables
    i,j=0,0
    product_list=[]
    product=1
    
    #algorithm to find products of all 13(in this case) numbers in series
    while(i!=len(k)-series_length-1):
        product=product*int(k[j])
        j+=1
        if j==i+series_length:
            i+=1
            j=i
            product_list.append(product)
            product=1
    
    p=0
    index=0
    maximum_product=max(product_list)
    #algorithm to find the index of the maximum product
    for item in product_list:
        if product_list[p]>maximum_product:
            index=p   
        p+=1
        
    digits_list=[]
    q=index
    #algorithm to find the digits whose product is maximum
    while(q<index+series_length):
        digits_list.append(int(k[q])) #converting string value to integer value
        q+=1       
    
    #printing the answer
    print("The ", series_length, " adjacent digits in the 1000-digit number that have the greatest product are ", digits_list)    
    print("And the maximum product is ", maximum_product)

def main():
    #test_case num = 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450, series_length=13
    largest_product_in_series(7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450, 13)
    
if __name__=='__main__':
    main()
