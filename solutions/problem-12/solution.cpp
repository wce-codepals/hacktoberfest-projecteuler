//#define __PRINT__

/*

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

*/

#include <iostream>
#include <list>
#include <map>

using namespace std;

typedef long t;

// Doesn't seem to be needed
// map<t, list<t>> cache;

int CalcDivisors(long d)
{
#ifdef __PRINT__
	cout << d << ": 1, ";
#endif

	int nDivisors = 2;

	t divisor = 2;
	t max = sqrt((double)d);

	// list<t> dList;

	while (divisor <= max)
	{
		if (d % divisor == 0)
		{
			nDivisors++;

#ifdef __PRINT__
			cout << divisor << ", ";
#endif

			t dd = d / divisor;

			if (dd != divisor)
			{
				// dList.push_back(dd);
				nDivisors++;

#ifdef __PRINT__
				cout << dd << ", ";
#endif
			}
		}

		divisor++;
	}
#ifdef __PRINT__	
	cout << d << " (" << nDivisors << ")" << endl;
#endif

	// cache[d] = dList;

	return nDivisors;
}

int main(int argc, char* argv[])
{
	int max = 0;
	long n = 10;

	// cache[1] = list<t>();
	// cache[2] = list<t>();

	long curr = 1;
	long i = 2;

	while (true)
	{
		int div = CalcDivisors(curr);
		max = div > max ? div : max;

		if (max > 500)
			break;

		curr += i;
		i++;
	}

	cout << curr << endl;

	return 0;
}
